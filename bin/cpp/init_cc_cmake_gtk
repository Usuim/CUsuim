#!/usr/bin/env bash

if [[ $# -eq 0 ]] ; then
    echo 'Use: init_cc_cmake_gtk -n NAME -v CPP VERSION (11,14,17,20)'
    exit 1
fi

while getopts n:v: flag
do
    case "${flag}" in
         n) name=${OPTARG};;
         v) cppv=${OPTARG};;
    esac
done

mkdir src include lib build

# CMakeLists.txt
echo "cmake_minimum_required(VERSION 3.7)
project($name)

file(GLOB SRC
  # Add your source files here
  # you can also use src/*.cpp and src/subdir/*.cpp to automatically add the source files
  src/main.cpp
  src/HelloWorld.cpp
)

# Search gtk4
find_package(PkgConfig)
pkg_check_modules(GTKMM gtkmm-4.0)

set (CMAKE_CXX_STANDARD $cppv)

include_directories(\${CMAKE_SOURCE_DIR}/include \${GTKMM_INCLUDE_DIRS})
link_directories(\${CMAKE_SOURCE_DIR}/lib \${GTKMM_LIBRARY_DIRS})

add_executable(app \${SRC})

# if you have a shared or static library, you can add the library here
# example: lib/libfoo.so -> target_link_libraries(app foo)
# and you can also link system libraries
# example: /usr/lib/libmagic.so -> target_link_libraries(app magic)
target_link_libraries(app \${GTKMM_LIBRARIES})" >> CMakeLists.txt

# main.cpp
echo "#include <iostream>
#include \"HelloWorld.hpp\"
#include <gtkmm/application.h>

int main(int argc, char* argv[])
{
  auto app = Gtk::Application::create(\"me.$USER.$name\");

  return app->make_window_and_run<HelloWorld>(argc, argv);
}" >> src/main.cpp

# HelloWorld.hpp
echo "#ifndef HELLOWORLD_HPP
#define HELLOWORLD_HPP

#include <gtkmm/button.h>
#include <gtkmm/window.h>

class HelloWorld : public Gtk::Window
{
  public:
    HelloWorld();
    ~HelloWorld() override;

  protected:
    void on_button_clicked();
    Gtk::Button m_button;
};

#endif" >> include/HelloWorld.hpp

# HelloWorld.cpp
echo "#include \"HelloWorld.hpp\"
#include <iostream>

HelloWorld::HelloWorld()
: m_button(\"Hello World\")
{
  m_button.set_margin(10);

  m_button.signal_clicked().connect(sigc::mem_fun(*this,
              &HelloWorld::on_button_clicked));

  set_child(m_button);
}

HelloWorld::~HelloWorld()
{
}

void HelloWorld::on_button_clicked()
{
  std::cout << \"Hello World\" << std::endl;
}" >> src/HelloWorld.cpp

# .cusuim.json
echo '{
  "run": "cd build && ./app",

  "build": "mkdir -p build/ && cd build && cmake .. && make",

  "buildAndRun": "mkdir -p build/ && cd build && cmake .. && make && ./app",

  "upclangd": "mkdir -p build && cd build && cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .. && mv compile_commands.json ..",
  "reconfigureBuildDir": "rm -rf ./build/ && mkdir -p build/ && cd build && cmake .."
}' >> .cusuim.json

cd build
cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 ..
mv compile_commands.json ..
