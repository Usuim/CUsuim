#!/usr/bin/env bash

if [[ $# -eq 0 ]] ; then
    echo 'Use: init_cc_meson_gtk -n NAME -v CPP VERSION (11,14,17,20)'
    exit 1
fi

while getopts n:v: flag
do
    case "${flag}" in
         n) name=${OPTARG};;
         v) cppv=${OPTARG};;
    esac
done

mkdir src include lib build

# meson.build
echo "# Project settings
project(
  '$name',
  'cpp',
  version: '1.0.0',
  default_options : 'cpp_std=c++$cppv'
)

# Source files
source_files = [
  'src/main.cpp',
  'src/HelloWorld.cpp'
]

# Search gtk4
libraries = [
  dependency('gtkmm-4.0')
]

# Include directory
incdir = include_directories('include')

# To link shared or static object in ./lib
# For example if you have lib/libsum.so or lib/libsum.a, you have to uncomment the following code

# libdir = '@0@/lib'.format(meson.current_source_dir())
# libraries = [
#   cc.find_library('sum', dirs : libdir),
# ]

# Important: if you change for example ( libsum.so -> libsum.a ) or ( libsum.a -> libsum.so ), you have to reconfigure the meson build folder: meson setup --reconfigure build

# Executable options
executable(
  meson.project_name(),
  source_files,
  dependencies: libraries,
  include_directories : incdir
)" >> meson.build

# main.cpp
echo "#include <iostream>
#include \"HelloWorld.hpp\"
#include <gtkmm/application.h>

int main(int argc, char* argv[])
{
  auto app = Gtk::Application::create(\"org.gtkmm.$name\");

  return app->make_window_and_run<HelloWorld>(argc, argv);
}" >> src/main.cpp

# HelloWorld.hpp
echo "#ifndef HELLOWORLD_HPP
#define HELLOWORLD_HPP

#include <gtkmm/button.h>
#include <gtkmm/window.h>

class HelloWorld : public Gtk::Window
{
  public:
    HelloWorld();
    ~HelloWorld() override;

  protected:
    void on_button_clicked();
    Gtk::Button m_button;
};

#endif" >> include/HelloWorld.hpp

# HelloWorld.cpp
echo "#include \"HelloWorld.hpp\"
#include <iostream>

HelloWorld::HelloWorld()
: m_button(\"Hello World\")
{
  m_button.set_margin(10);

  m_button.signal_clicked().connect(sigc::mem_fun(*this,
              &HelloWorld::on_button_clicked));

  set_child(m_button);
}

HelloWorld::~HelloWorld()
{
}

void HelloWorld::on_button_clicked()
{
  std::cout << \"Hello World\" << std::endl;
}" >> src/HelloWorld.cpp

# .cusuim.json
echo "{
  \"run\": \"cd build && ./$name\",

  \"build\": \"mkdir -p build/ && ninja -C build\",

  \"buildAndRun\": \"mkdir -p build/ && cd build && ninja && ./$name\",

  \"upclangd\": \"mkdir -p build && cd build/ && ninja -t compdb -x c_COMPILER cpp_COMPILER > compile_commands.json && mv compile_commands.json ..\",
  \"reconfigureBuildDir\": \"rm -rf ./build && mkdir -p build && meson build\"
}" >> .cusuim.json

meson build
cd build
ninja -t compdb -x c_COMPILER cpp_COMPILER > compile_commands.json
mv compile_commands.json ..
